# Generated by Django 5.0.4 on 2024-04-19 02:13
import json

import ckeditor.fields
import cloudinary.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

def load_data(apps, schema_editor):
    User = apps.get_model('m_apartment_api', 'User')
    Room = apps.get_model('m_apartment_api', 'Room')
    Resident = apps.get_model('m_apartment_api', 'Resident')
    Payment = apps.get_model('m_apartment_api', 'Payment')
    Receipt = apps.get_model('m_apartment_api', 'Receipt')
    SecurityCard = apps.get_model('m_apartment_api', 'SecurityCard')
    Package = apps.get_model('m_apartment_api', 'Package')
    Complaint = apps.get_model('m_apartment_api', 'Complaint')
    Survey = apps.get_model('m_apartment_api', 'Survey')
    QuestionSurvey = apps.get_model('m_apartment_api', 'QuestionSurvey')
    AnswerSurvey = apps.get_model('m_apartment_api', 'AnswerSurvey')
    ResultSurvey = apps.get_model('m_apartment_api', 'ResultSurvey')

    with open('full_data.json', 'r') as file:
        data = json.load(file)

    for user_data in data['users']:
        User.objects.create(**user_data)

    for room_data in data['rooms']:
        Room.objects.create(**room_data)

    for resident_data in data['residents']:
        Resident.objects.create(**resident_data)

    for payment_data in data['payments']:
        Payment.objects.create(**payment_data)

    for receipt_data in data['receipts']:
        Receipt.objects.create(**receipt_data)

    for securitycard_data in data['securitycards']:
        SecurityCard.objects.create(**securitycard_data)

    for package_data in data['packages']:
        Package.objects.create(**package_data)

    for complaint_data in data['complaints']:
        Complaint.objects.create(**complaint_data)

    for survey_data in data['surveys']:
        Survey.objects.create(**survey_data)

    for questionsurvey_data in data['questionsurveys']:
        QuestionSurvey.objects.create(**questionsurvey_data)

    for answersurvey_data in data['answersurveys']:
        AnswerSurvey.objects.create(**answersurvey_data)

    for resultsurvey_data in data['resultsurveys']:
        ResultSurvey.objects.create(**resultsurvey_data)

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=11)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestionSurvey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', ckeditor.fields.RichTextField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('number', models.CharField(max_length=10, unique=True)),
                ('description', models.CharField(max_length=255)),
                ('image', cloudinary.models.CloudinaryField(max_length=255)),
                ('square', models.DecimalField(decimal_places=2, max_digits=5)),
                ('is_empty', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('description', ckeditor.fields.RichTextField()),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Resident',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('phone', models.CharField(max_length=11, unique=True, validators=[django.core.validators.RegexValidator(message='Số điện thoại chỉ được chứa các số.', regex='^\\d+$')])),
                ('avatar', cloudinary.models.CloudinaryField(max_length=255)),
                ('answered_surveys', models.ManyToManyField(related_name='answered_residents', to='apartment.survey')),
                ('room', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='apartment.room')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('apartment.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AnswerSurvey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', ckeditor.fields.RichTextField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apartment.questionsurvey')),
                ('resident', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apartment.resident')),
            ],
        ),
        migrations.AddField(
            model_name='questionsurvey',
            name='survey',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apartment.survey'),
        ),
        migrations.CreateModel(
            name='SecurityCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('name_register', models.CharField(max_length=255)),
                ('vehicle_number', models.CharField(max_length=15)),
                ('resident', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apartment.resident')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResultSurvey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apartment.answersurvey')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apartment.questionsurvey')),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apartment.survey')),
                ('resident', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apartment.resident')),
            ],
        ),
        migrations.CreateModel(
            name='Receipt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=11)),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apartment.payment')),
                ('resident', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apartment.resident')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='payment',
            name='resident',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apartment.resident'),
        ),
        migrations.CreateModel(
            name='Package',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('note', models.CharField(max_length=255)),
                ('image', cloudinary.models.CloudinaryField(max_length=255)),
                ('resident', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apartment.resident')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Complaint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('content', ckeditor.fields.RichTextField()),
                ('image', cloudinary.models.CloudinaryField(max_length=255)),
                ('resident', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apartment.resident')),
            ],
            options={
                'abstract': False,
            },
        ),

        migrations.RunPython(load_data),
    ]
